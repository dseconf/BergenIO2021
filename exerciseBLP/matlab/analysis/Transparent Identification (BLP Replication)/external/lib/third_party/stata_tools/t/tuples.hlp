{smcl}
{* 3december2006/26january2011}{...}
{hline}
help for {hi:tuples}
{hline}

{title:Selecting all possible tuples from a list} 

{p 8 17 2} 
{cmd:tuples} 
{it: list}
[{cmd:,}
[{cmd:asis} {c |} {cmdab:var:list}] 
{cmdab:di:splay}
{cmd:max(}{it:#}{cmd:)}
]


{title:Description}

{p 4 4 2}
{cmd:tuples} produces a set of local macros, each containing a list of
the items defining a tuple selected from a given list. By default the
set of macros is complete, other than the tuple containing no
selections. By default the given list is tried as a variable list, but
if it is not a variable list any other kind of list is acceptable, 
except that no other kind of expansion takes place.   


{title:Remarks} 

{p 4 4 2} 
Given a list of n items, {cmd:tuples} produces 2^n - 1 macros, named
{cmd:tuple1} upwards, which are all possible distinct singletons (each
individual item); all possible distinct pairs; and so forth. Thus given
{cmd:frog toad newt}, local macros {cmd:tuple1} through {cmd:tuple7}
contain 

    {cmd:newt}
    {cmd:toad} 
    {cmd:frog} 
    {cmd:toad newt} 
    {cmd:frog newt} 
    {cmd:frog toad} 
    {cmd:frog toad newt} 

{p 4 4 2}Here n = 3, 2^n - 1 = 7 = {cmd:comb(3,1) + comb(3,2) + comb(3,3)}. 
     
{p 4 4 2} 
Note that no tuple is the empty tuple with no selections. Users wishing
to cycle over a set of tuples including the empty tuple can exploit the
fact that the local macro {cmd:tuple0} is undefined, and so empty
(unless the user has previously defined it explicitly), so that
{cmd:tuple0} can invoked with the correct result. 

{p 4 4 2} 
As usual, double quotes may be used to bind. Thus {cmd:"a b c" d e} is 
a list of three items, not five. 

{p 4 4 2} 
Remember that the number of possible macros will explode with the number of 
items supplied. For example, if 10 items are supplied, there will be 1023
macros. The number of macros created by {cmd:tuples} is returned in 
local macro {cmd:ntuples}. 

{p 4 4 2}
The algorithm used is naive and will be slow for above n ~ 10. 

{p 4 4 2}
Note: As of January 2011, this command is declared to supersede the author's 
{cmd:selectvars}. 


{title:Options} 

{p 4 8 2}{cmd:asis} specifies that a list should be treated as is, and
thus not unabbreviated as a {help varlist}. 

{p 4 8 2}{cmd:varlist} specifies that the list supplied should be a
{help varlist}, so that it is an error if the list is not in fact a
varlist. 

{p 8 8 2}{cmd:asis} and {cmd:varlist} are incompatible. 

{p 4 8 2}{cmd:display} specifies that tuples should be displayed. 

{p 4 8 2}{cmd:max(}{it:#}{cmd:)} specifies a maximum value for the
number of items in a tuple. 


{title:Examples}

{p 4 8 2}{cmd:. sysuse auto, clear}{p_end}
{p 4 8 2}{cmd:. tuples headroom trunk length displacement}{p_end}
{p 4 8 2}{cmd:. gen rsq = .}{p_end}
{p 4 8 2}{cmd:. gen predictors = ""}{p_end}
{p 4 8 2}{cmd:. qui forval i = 1/`ntuples' {c -(}}{p_end}
{p 4 8 2}{cmd:. {space 8}regress mpg `tuple`i''}{p_end}
{p 4 8 2}{cmd:. {space 8}replace rsq = e(r2) in `i'}{p_end}
{p 4 8 2}{cmd:. {space 8}replace predictors = "`tuple`i''" in `i'}{p_end}
{p 4 8 2}{cmd:. {c )-}}{p_end}
{p 4 8 2}{cmd:. gen p = wordcount(predictors) if predictors != ""}{p_end}
{p 4 8 2}{cmd:. sort p rsq}{p_end}
{p 4 8 2}{cmd:. l predictors rsq in 1/`ntuples'}{p_end} 

{p 4 8 2}{cmd:. tuples 1 2 3 4} 
    

{title:Author}

{p 4 4 2}Nicholas J. Cox, Durham University{break} 
n.j.cox@durham.ac.uk


{title:Acknowledgments} 

{p 4 4 2}Sebastian Orbe reported a problem which led to a bug fix. 


